import axios, { AxiosError } from 'axios';
import * as fs from 'fs';
import { Agent } from 'https';
import { v4 as uuidv4 } from 'uuid';
import progress from 'progress-stream';

// --- Gi·∫£ ƒë·ªãnh: C√°c h√†m n√†y ƒë∆∞·ª£c import t·ª´ c√°c file kh√°c ---
// B·∫°n c·∫ßn thay th·∫ø c√°c ƒë∆∞·ªùng d·∫´n import n√†y cho ƒë√∫ng v·ªõi c·∫•u tr√∫c d·ª± √°n c·ªßa b·∫°n.
import getToken from './getTokenService'; // Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt TokenService
import getAgent from './utils/getAgent'; // Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt h√†m ti·ªán √≠ch ƒë·ªÉ l·∫•y agent

// --- ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu ---

type MimeType = 'image/webp' | 'image/png' | 'image/jpeg' | 'image/gif' | 'audio/mpeg' | 'video/mp4';
type FileExtension = 'webp' | 'png' | 'jpg' | 'jpeg' | 'gif' | 'mp3' | 'mp4';

interface PresignResponse {
    data: {
        url: string;
    };
}

/**
 * L·ªõp UploadService ch·ªãu tr√°ch nhi·ªám cho vi·ªác t·∫£i t·ªáp l√™n Digen.
 */
export class UploadService {

    private readonly MAX_RETRIES = 5;

    /**
     * L·∫•y URL ƒë√£ k√Ω tr∆∞·ªõc (presigned URL) t·ª´ Digen ƒë·ªÉ chu·∫©n b·ªã cho vi·ªác t·∫£i l√™n.
     * @param format Ph·∫ßn m·ªü r·ªông c·ªßa t·ªáp (v√≠ d·ª•: 'webp', 'mp3').
     * @param token Token x√°c th·ª±c Digen.
     * @param agent HTTPS Agent ƒë·ªÉ s·ª≠ d·ª•ng proxy.
     * @returns URL ƒë√£ k√Ω tr∆∞·ªõc ho·∫∑c null n·∫øu th·∫•t b·∫°i.
     */
    private async getPresignedUrl(format: FileExtension, token: string, agent: Agent): Promise<string | null> {
        const url = `https://api.digen.ai/v1/element/priv/presign?format=${format}`;
        const headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
            'Content-Type': 'application/json',
            'digen-sessionid': uuidv4(),
            'digen-token': token,
            'digen-language': 'en-US'
        };

        try {
            const response = await axios.get<PresignResponse>(url, { headers, httpsAgent: agent });
            if (response.status !== 200 || !response.data?.data?.url) {
                console.error(`‚ùå L·ªói khi l·∫•y presign url: ${response.statusText}`);
                return null;
            }
            return response.data.data.url;
        } catch (error) {
            const err = error as AxiosError;
            console.error(`‚ùå L·ªói khi g·ªçi API l·∫•y presign url:`, err.response?.data || err.message);
            return null;
        }
    }

    /**
     * T·∫£i m·ªôt buffer t·ªáp l√™n URL ƒë√£ k√Ω tr∆∞·ªõc.
     * @param endpoint URL ƒë√£ k√Ω tr∆∞·ªõc.
     * @param fileBuffer Buffer ch·ª©a d·ªØ li·ªáu t·ªáp.
     * @param mimeType Ki·ªÉu MIME c·ªßa t·ªáp.
     * @param fileSize K√≠ch th∆∞·ªõc t·ªáp (bytes).
     * @returns boolean cho bi·∫øt vi·ªác t·∫£i l√™n c√≥ th√†nh c√¥ng hay kh√¥ng.
     */
    private async uploadFileToEndpoint(endpoint: string, fileBuffer: Buffer, mimeType: MimeType, fileSize: number): Promise<boolean> {
        try {
            const progressStream = progress({ length: fileSize, time: 100 });
            progressStream.on('progress', (p) => {
                process.stdout.write(`\rüöÄ ƒêang upload: ${Math.round(p.percentage)}%`);
            });
            
            const uploadResponse = await axios.put(endpoint, fileBuffer, {
                headers: {
                    'Content-Type': mimeType,
                    'Content-Length': fileSize
                },
                maxBodyLength: Infinity,
                maxContentLength: Infinity,
                transformRequest: [(data, headers) => {
                    // ƒê√≠nh k√®m stream v√†o request
                    return data.pipe(progressStream);
                }],
            });

            process.stdout.write(`\r‚úÖ ƒê√£ upload th√†nh c√¥ng 100%!\n`);
            return uploadResponse.status === 200;
        } catch (error) {
            const err = error as AxiosError;
            console.error(`\n‚ùå L·ªói khi PUT t·ªáp l√™n endpoint:`, err.response?.data || err.message);
            return false;
        }
    }

    /**
     * L·∫•y ki·ªÉu MIME t·ª´ ph·∫ßn m·ªü r·ªông c·ªßa t·ªáp.
     * @param extension Ph·∫ßn m·ªü r·ªông c·ªßa t·ªáp.
     * @returns Ki·ªÉu MIME t∆∞∆°ng ·ª©ng.
     */
    private getMimeType(extension: FileExtension): MimeType {
        const mimeMap: Record<FileExtension, MimeType> = {
            'webp': 'image/webp',
            'png': 'image/png',
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'gif': 'image/gif',
            'mp3': 'audio/mpeg',
            'mp4': 'video/mp4',
        };
        return mimeMap[extension];
    }
    
    /**
     * Ph∆∞∆°ng th·ª©c chung ƒë·ªÉ x·ª≠ l√Ω logic t·∫£i l√™n cho b·∫•t k·ª≥ lo·∫°i t·ªáp n√†o.
     * @param filePath ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp.
     * @param extension Ph·∫ßn m·ªü r·ªông c·ªßa t·ªáp.
     * @param fileTypeDescription M√¥ t·∫£ lo·∫°i t·ªáp (v√≠ d·ª•: '·∫£nh', 'MP3').
     * @param run S·ªë l·∫ßn th·ª≠ l·∫°i hi·ªán t·∫°i.
     * @returns URL c√¥ng khai c·ªßa t·ªáp ƒë√£ t·∫£i l√™n ho·∫∑c null n·∫øu th·∫•t b·∫°i.
     */
    private async uploadGenericFile(
        filePath: string, 
        extension: FileExtension, 
        fileTypeDescription: string,
        run = 0
    ): Promise<string | null> {
        if (!fs.existsSync(filePath)) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ${fileTypeDescription}: ${filePath}`);
            return null;
        }
        if (run >= this.MAX_RETRIES) {
            console.log(`‚ùå L·ªói khi upload ${fileTypeDescription} sau ${this.MAX_RETRIES} l·∫ßn th·ª≠: ${filePath}`);
            return null;
        }

        try {
            // Gi·∫£ ƒë·ªãnh `getToken.digen` tr·∫£ v·ªÅ m·ªôt string ho·∫∑c null
            const token = await getToken.digen(0, 3991) as string | null;
            if (!token) {
                console.error('‚ùå Kh√¥ng th·ªÉ l·∫•y Digen token.');
                // Th·ª≠ l·∫°i sau m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn
                await new Promise(res => setTimeout(res, 2000));
                return this.uploadGenericFile(filePath, extension, fileTypeDescription, run + 1);
            }

            const agent = await getAgent();
            const endpoint = await this.getPresignedUrl(extension, token, agent);
            if (!endpoint) {
                return this.uploadGenericFile(filePath, extension, fileTypeDescription, run + 1);
            }

            const fileBuffer = fs.readFileSync(filePath);
            const fileSize = fs.statSync(filePath).size;
            const mimeType = this.getMimeType(extension);

            const success = await this.uploadFileToEndpoint(endpoint, fileBuffer, mimeType, fileSize);
            if (!success) {
                return this.uploadGenericFile(filePath, extension, fileTypeDescription, run + 1);
            }

            return endpoint.split('?')[0];

        } catch (error: any) {
            console.error(`‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi upload ${fileTypeDescription}:`, error.message);
            return this.uploadGenericFile(filePath, extension, fileTypeDescription, run + 1);
        }
    }

    /**
     * T·∫£i m·ªôt t·ªáp ·∫£nh l√™n Digen.
     * @param imagePath ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp ·∫£nh.
     * @param extension Ph·∫ßn m·ªü r·ªông c·ªßa ·∫£nh ('webp', 'png', 'jpg', 'gif').
     * @param run S·ªë l·∫ßn th·ª≠ l·∫°i.
     * @returns URL c√¥ng khai c·ªßa ·∫£nh ho·∫∑c null n·∫øu th·∫•t b·∫°i.
     */
    public async uploadDigenImage(imagePath: string, extension: 'webp' | 'png' | 'jpg' | 'jpeg' | 'gif', run = 0): Promise<string | null> {
        return this.uploadGenericFile(imagePath, extension, '·∫£nh', run);
    }
    
    /**
     * T·∫£i m·ªôt t·ªáp MP3 l√™n Digen.
     * @param mp3Path ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp MP3.
     * @param run S·ªë l·∫ßn th·ª≠ l·∫°i.
     * @returns URL c√¥ng khai c·ªßa t·ªáp MP3 ho·∫∑c null n·∫øu th·∫•t b·∫°i.
     */
    public async uploadDigenMp3(mp3Path: string, run = 0): Promise<string | null> {
        return this.uploadGenericFile(mp3Path, 'mp3', 'MP3', run);
    }

    /**
     * T·∫£i m·ªôt t·ªáp MP4 l√™n Digen.
     * @param mp4Path ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp MP4.
     * @param run S·ªë l·∫ßn th·ª≠ l·∫°i.
     * @returns URL c√¥ng khai c·ªßa t·ªáp MP4 ho·∫∑c null n·∫øu th·∫•t b·∫°i.
     */
    public async uploadDigenVideo(mp4Path: string, run = 0): Promise<string | null> {
        return this.uploadGenericFile(mp4Path, 'mp4', 'MP4', run);
    }
}

//export
export default UploadService;
